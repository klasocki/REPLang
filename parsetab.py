
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIFELSETHENWHILEleft;leftPRINTleftEQNEQ><leftNOTleft=right2INT2FLOAT2STR2BOOLleft+-left*/right^rightUMINUS2BOOL 2FLOAT 2INT 2STR BOOL_TYPE DEF DO ELSE END EQ FALSE FLOAT FLOAT_TYPE IF INT_TYPE NAME NEQ NOT NUMBER PRINT STRING STRING_TYPE THEN TRUE WHILEstatement : expressionstatement : statement \';\' statementconvert : 2INT\n                | 2STR\n                | 2FLOAT\n                | 2BOOLexpression : convert expressionexpression : NOT expressionexpression : PRINT expressionexpression : NAME "=" expressiontype : STRING_TYPE\n    | INT_TYPE\n    | FLOAT_TYPE\n    | BOOL_TYPEexpression : type NAME "=" expressionstatement : DEF NAME args \'-\' \'>\' type \'=\' expressionargs : empty\n            | type NAME argsexpression : NAME \'(\' call_args \')\'call_args : empty\n                | expression\n                | expression \',\' call_argsexpression : error \';\' expressionexpression : expression \';\' expressionexpression : \'{\' expression \'}\'expression : IF expression THEN expression else_expressionelse_expression : ELSE expression\n                        | emptyexpression : WHILE expression DO expression ENDexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expression\n                  | expression EQ expression\n                  | expression \'>\' expression\n                  | expression \'<\' expression\n                  | expression NEQ expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : NUMBER\n                    | FLOAT\n                    | STRING\n                    | TRUE\n                    | FALSEexpression : NAMEempty :'
    
_lr_action_items = {'DEF':([0,28,],[3,3,]),'NOT':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[8,8,8,8,8,8,8,8,8,-3,-4,-5,-6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'PRINT':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[9,9,9,9,9,9,9,9,9,-3,-4,-5,-6,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'NAME':([0,3,5,6,7,8,9,10,12,13,14,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,48,64,70,74,75,79,87,92,],[4,39,4,43,4,4,4,4,4,4,4,-3,-4,-5,-6,-11,-12,-13,-14,4,4,4,4,4,4,4,4,4,4,4,4,4,4,77,4,4,4,4,4,4,]),'error':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[11,11,11,11,11,11,11,11,11,-3,-4,-5,-6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'{':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[12,12,12,12,12,12,12,12,12,-3,-4,-5,-6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'IF':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[13,13,13,13,13,13,13,13,13,-3,-4,-5,-6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'WHILE':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[14,14,14,14,14,14,14,14,14,-3,-4,-5,-6,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'-':([0,2,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,65,66,69,70,71,72,73,74,75,77,78,79,80,81,82,84,86,87,88,89,91,92,93,],[5,31,-46,5,5,5,5,5,5,5,5,-41,-42,-43,-44,-45,-3,-4,-5,-6,5,5,5,5,5,5,5,5,5,5,5,-47,5,5,-39,31,31,31,31,5,31,31,31,31,-30,-31,-32,-33,-34,31,31,31,31,76,-17,31,31,5,-40,31,-25,5,5,-47,-19,5,31,31,31,-18,-26,5,-28,-29,31,5,31,]),'(':([0,4,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[10,41,10,10,10,10,10,10,10,10,-3,-4,-5,-6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'NUMBER':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[15,15,15,15,15,15,15,15,15,-3,-4,-5,-6,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'FLOAT':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[16,16,16,16,16,16,16,16,16,-3,-4,-5,-6,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'STRING':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[17,17,17,17,17,17,17,17,17,-3,-4,-5,-6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'TRUE':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[18,18,18,18,18,18,18,18,18,-3,-4,-5,-6,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'FALSE':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[19,19,19,19,19,19,19,19,19,-3,-4,-5,-6,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'2INT':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[20,20,20,20,20,20,20,20,20,-3,-4,-5,-6,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'2STR':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[21,21,21,21,21,21,21,21,21,-3,-4,-5,-6,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'2FLOAT':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[22,22,22,22,22,22,22,22,22,-3,-4,-5,-6,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'2BOOL':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[23,23,23,23,23,23,23,23,23,-3,-4,-5,-6,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'STRING_TYPE':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,48,70,74,75,77,79,83,87,92,],[24,24,24,24,24,24,24,24,24,-3,-4,-5,-6,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'INT_TYPE':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,48,70,74,75,77,79,83,87,92,],[25,25,25,25,25,25,25,25,25,-3,-4,-5,-6,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'FLOAT_TYPE':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,48,70,74,75,77,79,83,87,92,],[26,26,26,26,26,26,26,26,26,-3,-4,-5,-6,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'BOOL_TYPE':([0,5,7,8,9,10,12,13,14,20,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,48,70,74,75,77,79,83,87,92,],[27,27,27,27,27,27,27,27,27,-3,-4,-5,-6,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'$end':([1,2,4,15,16,17,18,19,42,44,45,46,52,53,54,55,56,57,58,59,60,61,62,66,71,72,73,78,80,81,86,88,89,91,93,],[0,-1,-46,-41,-42,-43,-44,-45,-39,-7,-8,-9,-2,-24,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,-40,-23,-25,-19,-15,-47,-26,-28,-29,-27,-16,]),';':([1,2,4,11,15,16,17,18,19,42,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,69,71,72,73,78,80,81,82,86,88,89,91,93,],[28,29,-46,48,-41,-42,-43,-44,-45,-39,29,-8,-9,29,29,29,29,-2,-24,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,29,-40,-23,-25,-19,-15,29,29,-26,-28,-29,29,-16,]),'+':([2,4,15,16,17,18,19,42,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,66,69,71,72,73,78,80,81,82,86,88,89,91,93,],[30,-46,-41,-42,-43,-44,-45,-39,30,30,30,30,30,30,30,30,-30,-31,-32,-33,-34,30,30,30,30,30,30,-40,30,-25,-19,30,30,30,-26,-28,-29,30,30,]),'*':([2,4,15,16,17,18,19,42,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,66,69,71,72,73,78,80,81,82,86,88,89,91,93,],[32,-46,-41,-42,-43,-44,-45,-39,32,32,32,32,32,32,32,32,32,32,-32,-33,-34,32,32,32,32,32,32,-40,32,-25,-19,32,32,32,-26,-28,-29,32,32,]),'/':([2,4,15,16,17,18,19,42,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,66,69,71,72,73,78,80,81,82,86,88,89,91,93,],[33,-46,-41,-42,-43,-44,-45,-39,33,33,33,33,33,33,33,33,33,33,-32,-33,-34,33,33,33,33,33,33,-40,33,-25,-19,33,33,33,-26,-28,-29,33,33,]),'^':([2,4,15,16,17,18,19,42,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,66,69,71,72,73,78,80,81,82,86,88,89,91,93,],[34,-46,-41,-42,-43,-44,-45,-39,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-40,34,-25,-19,34,34,34,-26,-28,-29,34,34,]),'EQ':([2,4,15,16,17,18,19,42,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,66,69,71,72,73,78,80,81,82,86,88,89,91,93,],[35,-46,-41,-42,-43,-44,-45,-39,35,-8,35,35,35,35,35,35,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,35,-40,35,-25,-19,-15,35,35,-26,-28,-29,35,35,]),'>':([2,4,15,16,17,18,19,42,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,66,69,71,72,73,76,78,80,81,82,86,88,89,91,93,],[36,-46,-41,-42,-43,-44,-45,-39,36,-8,36,36,36,36,36,36,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,36,-40,36,-25,83,-19,-15,36,36,-26,-28,-29,36,36,]),'<':([2,4,15,16,17,18,19,42,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,66,69,71,72,73,78,80,81,82,86,88,89,91,93,],[37,-46,-41,-42,-43,-44,-45,-39,37,-8,37,37,37,37,37,37,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,37,-40,37,-25,-19,-15,37,37,-26,-28,-29,37,37,]),'NEQ':([2,4,15,16,17,18,19,42,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,66,69,71,72,73,78,80,81,82,86,88,89,91,93,],[38,-46,-41,-42,-43,-44,-45,-39,38,-8,38,38,38,38,38,38,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,38,-40,38,-25,-19,-15,38,38,-26,-28,-29,38,38,]),'=':([4,24,25,26,27,43,90,],[40,-11,-12,-13,-14,70,92,]),')':([4,15,16,17,18,19,41,42,44,45,46,47,53,54,55,56,57,58,59,60,61,62,66,67,68,69,71,72,73,78,79,80,81,85,86,88,89,91,],[-46,-41,-42,-43,-44,-45,-47,-39,-7,-8,-9,71,-24,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,78,-20,-21,-40,-23,-25,-19,-47,-15,-47,-22,-26,-28,-29,-27,]),'}':([4,15,16,17,18,19,42,44,45,46,49,53,54,55,56,57,58,59,60,61,62,66,71,72,73,78,80,81,86,88,89,91,],[-46,-41,-42,-43,-44,-45,-39,-7,-8,-9,73,-24,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,-40,-23,-25,-19,-15,-47,-26,-28,-29,-27,]),'THEN':([4,15,16,17,18,19,42,44,45,46,50,53,54,55,56,57,58,59,60,61,62,66,71,72,73,78,80,81,86,88,89,91,],[-46,-41,-42,-43,-44,-45,-39,-7,-8,-9,74,-24,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,-40,-23,-25,-19,-15,-47,-26,-28,-29,-27,]),'DO':([4,15,16,17,18,19,42,44,45,46,51,53,54,55,56,57,58,59,60,61,62,66,71,72,73,78,80,81,86,88,89,91,],[-46,-41,-42,-43,-44,-45,-39,-7,-8,-9,75,-24,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,-40,-23,-25,-19,-15,-47,-26,-28,-29,-27,]),',':([4,15,16,17,18,19,42,44,45,46,53,54,55,56,57,58,59,60,61,62,66,69,71,72,73,78,80,81,86,88,89,91,],[-46,-41,-42,-43,-44,-45,-39,-7,-8,-9,-24,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,79,-40,-23,-25,-19,-15,-47,-26,-28,-29,-27,]),'ELSE':([4,15,16,17,18,19,42,44,45,46,53,54,55,56,57,58,59,60,61,62,66,71,72,73,78,80,81,86,88,89,91,],[-46,-41,-42,-43,-44,-45,-39,-7,-8,-9,-24,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,-40,-23,-25,-19,-15,87,-26,-28,-29,-27,]),'END':([4,15,16,17,18,19,42,44,45,46,53,54,55,56,57,58,59,60,61,62,66,71,72,73,78,80,81,82,86,88,89,91,],[-46,-41,-42,-43,-44,-45,-39,-7,-8,-9,-24,-30,-31,-32,-33,-34,-35,-36,-37,-38,-10,-40,-23,-25,-19,-15,-47,89,-26,-28,-29,-27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,28,],[1,52,]),'expression':([0,5,7,8,9,10,12,13,14,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[2,42,44,45,46,47,49,50,51,2,53,54,55,56,57,58,59,60,61,62,66,69,72,80,81,82,69,91,93,]),'type':([0,5,7,8,9,10,12,13,14,28,29,30,31,32,33,34,35,36,37,38,39,40,41,48,70,74,75,77,79,83,87,92,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,64,6,6,6,6,6,6,64,6,90,6,6,]),'convert':([0,5,7,8,9,10,12,13,14,28,29,30,31,32,33,34,35,36,37,38,40,41,48,70,74,75,79,87,92,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'args':([39,77,],[63,84,]),'empty':([39,41,77,79,81,],[65,68,65,68,88,]),'call_args':([41,79,],[67,85,]),'else_expression':([81,],[86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','repl.py',171),
  ('statement -> statement ; statement','statement',3,'p_statement_sequence','repl.py',180),
  ('convert -> 2INT','convert',1,'p_convert','repl.py',184),
  ('convert -> 2STR','convert',1,'p_convert','repl.py',185),
  ('convert -> 2FLOAT','convert',1,'p_convert','repl.py',186),
  ('convert -> 2BOOL','convert',1,'p_convert','repl.py',187),
  ('expression -> convert expression','expression',2,'p_expression_convert','repl.py',213),
  ('expression -> NOT expression','expression',2,'p_expression_not','repl.py',231),
  ('expression -> PRINT expression','expression',2,'p_expression_print','repl.py',240),
  ('expression -> NAME = expression','expression',3,'p_expression_assign','repl.py',251),
  ('type -> STRING_TYPE','type',1,'p_type','repl.py',264),
  ('type -> INT_TYPE','type',1,'p_type','repl.py',265),
  ('type -> FLOAT_TYPE','type',1,'p_type','repl.py',266),
  ('type -> BOOL_TYPE','type',1,'p_type','repl.py',267),
  ('expression -> type NAME = expression','expression',4,'p_expression_declare','repl.py',272),
  ('statement -> DEF NAME args - > type = expression','statement',8,'p_statement_def','repl.py',284),
  ('args -> empty','args',1,'p_args','repl.py',301),
  ('args -> type NAME args','args',3,'p_args','repl.py',302),
  ('expression -> NAME ( call_args )','expression',4,'p_expression_call','repl.py',310),
  ('call_args -> empty','call_args',1,'p_call_args','repl.py',315),
  ('call_args -> expression','call_args',1,'p_call_args','repl.py',316),
  ('call_args -> expression , call_args','call_args',3,'p_call_args','repl.py',317),
  ('expression -> error ; expression','expression',3,'p_error_expression','repl.py',355),
  ('expression -> expression ; expression','expression',3,'p_expression_sequence','repl.py',360),
  ('expression -> { expression }','expression',3,'p_expression_block','repl.py',375),
  ('expression -> IF expression THEN expression else_expression','expression',5,'p_expression_if','repl.py',385),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','repl.py',413),
  ('else_expression -> empty','else_expression',1,'p_else_expression','repl.py',414),
  ('expression -> WHILE expression DO expression END','expression',5,'p_expression_while','repl.py',419),
  ('expression -> expression + expression','expression',3,'p_expression_binop','repl.py',435),
  ('expression -> expression - expression','expression',3,'p_expression_binop','repl.py',436),
  ('expression -> expression * expression','expression',3,'p_expression_binop','repl.py',437),
  ('expression -> expression / expression','expression',3,'p_expression_binop','repl.py',438),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','repl.py',439),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','repl.py',440),
  ('expression -> expression > expression','expression',3,'p_expression_binop','repl.py',441),
  ('expression -> expression < expression','expression',3,'p_expression_binop','repl.py',442),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','repl.py',443),
  ('expression -> - expression','expression',2,'p_expression_uminus','repl.py',522),
  ('expression -> ( expression )','expression',3,'p_expression_group','repl.py',536),
  ('expression -> NUMBER','expression',1,'p_expression_value','repl.py',541),
  ('expression -> FLOAT','expression',1,'p_expression_value','repl.py',542),
  ('expression -> STRING','expression',1,'p_expression_value','repl.py',543),
  ('expression -> TRUE','expression',1,'p_expression_value','repl.py',544),
  ('expression -> FALSE','expression',1,'p_expression_value','repl.py',545),
  ('expression -> NAME','expression',1,'p_expression_name','repl.py',550),
  ('empty -> <empty>','empty',0,'p_empty','repl.py',602),
]
