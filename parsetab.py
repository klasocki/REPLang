
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIFELSETHENWHILEleft;rightPRINTleftEQNEQ><leftNOTleft=right2INT2FLOAT2STR2BOOLleft+-left*/rightPOWrightSINCOSrightUMINUS2BOOL 2FLOAT 2INT 2STR BOOL_TYPE COS DEF DO ELSE END EQ FALSE FLOAT FLOAT_TYPE IF INT_TYPE NAME NEQ NOT NUMBER POW PRINT SIN STRING STRING_TYPE THEN TRUE WHILEstatement : expressionstatement : statement \';\' statementconvert : 2INT\n                | 2STR\n                | 2FLOAT\n                | 2BOOLexpression : convert expressionexpression : NOT expressionexpression : PRINT expression\n                    | SIN expression\n                    | COS expressionexpression : NAME "=" expressiontype : STRING_TYPE\n    | INT_TYPE\n    | FLOAT_TYPE\n    | BOOL_TYPEexpression : type NAME "=" expressionstatement : DEF NAME args \'-\' \'>\' type \'=\' expressionargs : empty\n            | type NAME argsexpression : NAME \'(\' call_args \')\'call_args : empty\n                | expression\n                | expression \',\' call_argsexpression : error \';\' expressionexpression : expression \';\' expressionexpression : \'{\' expression \'}\'expression : IF expression THEN expression else_expressionelse_expression : ELSE expression\n                        | emptyexpression : WHILE expression DO expression ENDexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression POW expression\n                  | expression EQ expression\n                  | expression \'>\' expression\n                  | expression \'<\' expression\n                  | expression NEQ expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : NUMBER\n                    | FLOAT\n                    | STRING\n                    | TRUE\n                    | FALSEexpression : NAMEempty :'
    
_lr_action_items = {'DEF':([0,30,],[3,3,]),'NOT':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[8,8,8,8,8,8,8,8,8,8,8,-3,-4,-5,-6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'PRINT':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[9,9,9,9,9,9,9,9,9,9,9,-3,-4,-5,-6,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'SIN':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[10,10,10,10,10,10,10,10,10,10,10,-3,-4,-5,-6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'COS':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[11,11,11,11,11,11,11,11,11,11,11,-3,-4,-5,-6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'NAME':([0,3,5,6,7,8,9,10,11,12,14,15,16,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,52,68,74,78,79,83,91,96,],[4,41,4,45,4,4,4,4,4,4,4,4,4,-3,-4,-5,-6,-13,-14,-15,-16,4,4,4,4,4,4,4,4,4,4,4,4,4,4,81,4,4,4,4,4,4,]),'error':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[13,13,13,13,13,13,13,13,13,13,13,-3,-4,-5,-6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'{':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[14,14,14,14,14,14,14,14,14,14,14,-3,-4,-5,-6,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[15,15,15,15,15,15,15,15,15,15,15,-3,-4,-5,-6,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'WHILE':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[16,16,16,16,16,16,16,16,16,16,16,-3,-4,-5,-6,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'-':([0,2,4,5,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,69,70,73,74,75,76,77,78,79,81,82,83,84,85,86,88,90,91,92,93,95,96,97,],[5,33,-48,5,5,5,5,5,5,5,5,5,5,-43,-44,-45,-46,-47,-3,-4,-5,-6,5,5,5,5,5,5,5,5,5,5,5,-49,5,5,-41,33,33,33,-10,-11,33,5,33,33,33,33,-32,-33,-34,-35,-36,33,33,33,33,80,-19,33,33,5,-42,33,-27,5,5,-49,-21,5,33,33,33,-20,-28,5,-30,-31,33,5,33,]),'(':([0,4,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[12,43,12,12,12,12,12,12,12,12,12,12,-3,-4,-5,-6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'NUMBER':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[17,17,17,17,17,17,17,17,17,17,17,-3,-4,-5,-6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'FLOAT':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[18,18,18,18,18,18,18,18,18,18,18,-3,-4,-5,-6,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'STRING':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[19,19,19,19,19,19,19,19,19,19,19,-3,-4,-5,-6,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'TRUE':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[20,20,20,20,20,20,20,20,20,20,20,-3,-4,-5,-6,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FALSE':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[21,21,21,21,21,21,21,21,21,21,21,-3,-4,-5,-6,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'2INT':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[22,22,22,22,22,22,22,22,22,22,22,-3,-4,-5,-6,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'2STR':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[23,23,23,23,23,23,23,23,23,23,23,-3,-4,-5,-6,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'2FLOAT':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[24,24,24,24,24,24,24,24,24,24,24,-3,-4,-5,-6,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'2BOOL':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[25,25,25,25,25,25,25,25,25,25,25,-3,-4,-5,-6,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'STRING_TYPE':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,52,74,78,79,81,83,87,91,96,],[26,26,26,26,26,26,26,26,26,26,26,-3,-4,-5,-6,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'INT_TYPE':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,52,74,78,79,81,83,87,91,96,],[27,27,27,27,27,27,27,27,27,27,27,-3,-4,-5,-6,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'FLOAT_TYPE':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,52,74,78,79,81,83,87,91,96,],[28,28,28,28,28,28,28,28,28,28,28,-3,-4,-5,-6,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'BOOL_TYPE':([0,5,7,8,9,10,11,12,14,15,16,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,52,74,78,79,81,83,87,91,96,],[29,29,29,29,29,29,29,29,29,29,29,-3,-4,-5,-6,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'$end':([1,2,4,17,18,19,20,21,44,46,47,48,49,50,56,57,58,59,60,61,62,63,64,65,66,70,75,76,77,82,84,85,90,92,93,95,97,],[0,-1,-48,-43,-44,-45,-46,-47,-41,-7,-8,-9,-10,-11,-2,-26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,-42,-25,-27,-21,-17,-49,-28,-30,-31,-29,-18,]),';':([1,2,4,13,17,18,19,20,21,44,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,73,75,76,77,82,84,85,86,90,92,93,95,97,],[30,31,-48,52,-43,-44,-45,-46,-47,-41,31,-8,-9,-10,-11,31,31,31,31,-2,-26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,31,-42,-25,-27,-21,-17,31,31,-28,-30,-31,31,-18,]),'+':([2,4,17,18,19,20,21,44,46,47,48,49,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,70,73,75,76,77,82,84,85,86,90,92,93,95,97,],[32,-48,-43,-44,-45,-46,-47,-41,32,32,32,-10,-11,32,32,32,32,32,-32,-33,-34,-35,-36,32,32,32,32,32,32,-42,32,-27,-21,32,32,32,-28,-30,-31,32,32,]),'*':([2,4,17,18,19,20,21,44,46,47,48,49,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,70,73,75,76,77,82,84,85,86,90,92,93,95,97,],[34,-48,-43,-44,-45,-46,-47,-41,34,34,34,-10,-11,34,34,34,34,34,34,34,-34,-35,-36,34,34,34,34,34,34,-42,34,-27,-21,34,34,34,-28,-30,-31,34,34,]),'/':([2,4,17,18,19,20,21,44,46,47,48,49,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,70,73,75,76,77,82,84,85,86,90,92,93,95,97,],[35,-48,-43,-44,-45,-46,-47,-41,35,35,35,-10,-11,35,35,35,35,35,35,35,-34,-35,-36,35,35,35,35,35,35,-42,35,-27,-21,35,35,35,-28,-30,-31,35,35,]),'POW':([2,4,17,18,19,20,21,44,46,47,48,49,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,70,73,75,76,77,82,84,85,86,90,92,93,95,97,],[36,-48,-43,-44,-45,-46,-47,-41,36,36,36,-10,-11,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-42,36,-27,-21,36,36,36,-28,-30,-31,36,36,]),'EQ':([2,4,17,18,19,20,21,44,46,47,48,49,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,70,73,75,76,77,82,84,85,86,90,92,93,95,97,],[37,-48,-43,-44,-45,-46,-47,-41,37,-8,37,-10,-11,37,37,37,37,37,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,37,-42,37,-27,-21,-17,37,37,-28,-30,-31,37,37,]),'>':([2,4,17,18,19,20,21,44,46,47,48,49,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,70,73,75,76,77,80,82,84,85,86,90,92,93,95,97,],[38,-48,-43,-44,-45,-46,-47,-41,38,-8,38,-10,-11,38,38,38,38,38,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,38,-42,38,-27,87,-21,-17,38,38,-28,-30,-31,38,38,]),'<':([2,4,17,18,19,20,21,44,46,47,48,49,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,70,73,75,76,77,82,84,85,86,90,92,93,95,97,],[39,-48,-43,-44,-45,-46,-47,-41,39,-8,39,-10,-11,39,39,39,39,39,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,39,-42,39,-27,-21,-17,39,39,-28,-30,-31,39,39,]),'NEQ':([2,4,17,18,19,20,21,44,46,47,48,49,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,70,73,75,76,77,82,84,85,86,90,92,93,95,97,],[40,-48,-43,-44,-45,-46,-47,-41,40,-8,40,-10,-11,40,40,40,40,40,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,40,-42,40,-27,-21,-17,40,40,-28,-30,-31,40,40,]),'=':([4,26,27,28,29,45,94,],[42,-13,-14,-15,-16,74,96,]),')':([4,17,18,19,20,21,43,44,46,47,48,49,50,51,57,58,59,60,61,62,63,64,65,66,70,71,72,73,75,76,77,82,83,84,85,89,90,92,93,95,],[-48,-43,-44,-45,-46,-47,-49,-41,-7,-8,-9,-10,-11,75,-26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,82,-22,-23,-42,-25,-27,-21,-49,-17,-49,-24,-28,-30,-31,-29,]),'}':([4,17,18,19,20,21,44,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,70,75,76,77,82,84,85,90,92,93,95,],[-48,-43,-44,-45,-46,-47,-41,-7,-8,-9,-10,-11,77,-26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,-42,-25,-27,-21,-17,-49,-28,-30,-31,-29,]),'THEN':([4,17,18,19,20,21,44,46,47,48,49,50,54,57,58,59,60,61,62,63,64,65,66,70,75,76,77,82,84,85,90,92,93,95,],[-48,-43,-44,-45,-46,-47,-41,-7,-8,-9,-10,-11,78,-26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,-42,-25,-27,-21,-17,-49,-28,-30,-31,-29,]),'DO':([4,17,18,19,20,21,44,46,47,48,49,50,55,57,58,59,60,61,62,63,64,65,66,70,75,76,77,82,84,85,90,92,93,95,],[-48,-43,-44,-45,-46,-47,-41,-7,-8,-9,-10,-11,79,-26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,-42,-25,-27,-21,-17,-49,-28,-30,-31,-29,]),',':([4,17,18,19,20,21,44,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,70,73,75,76,77,82,84,85,90,92,93,95,],[-48,-43,-44,-45,-46,-47,-41,-7,-8,-9,-10,-11,-26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,83,-42,-25,-27,-21,-17,-49,-28,-30,-31,-29,]),'ELSE':([4,17,18,19,20,21,44,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,70,75,76,77,82,84,85,90,92,93,95,],[-48,-43,-44,-45,-46,-47,-41,-7,-8,-9,-10,-11,-26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,-42,-25,-27,-21,-17,91,-28,-30,-31,-29,]),'END':([4,17,18,19,20,21,44,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,70,75,76,77,82,84,85,86,90,92,93,95,],[-48,-43,-44,-45,-46,-47,-41,-7,-8,-9,-10,-11,-26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-12,-42,-25,-27,-21,-17,-49,93,-28,-30,-31,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,30,],[1,56,]),'expression':([0,5,7,8,9,10,11,12,14,15,16,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[2,44,46,47,48,49,50,51,53,54,55,2,57,58,59,60,61,62,63,64,65,66,70,73,76,84,85,86,73,95,97,]),'type':([0,5,7,8,9,10,11,12,14,15,16,30,31,32,33,34,35,36,37,38,39,40,41,42,43,52,74,78,79,81,83,87,91,96,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,68,6,6,6,6,6,6,68,6,94,6,6,]),'convert':([0,5,7,8,9,10,11,12,14,15,16,30,31,32,33,34,35,36,37,38,39,40,42,43,52,74,78,79,83,91,96,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'args':([41,81,],[67,88,]),'empty':([41,43,81,83,85,],[69,72,69,72,92,]),'call_args':([43,83,],[71,89,]),'else_expression':([85,],[90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','repl.py',183),
  ('statement -> statement ; statement','statement',3,'p_statement_sequence','repl.py',192),
  ('convert -> 2INT','convert',1,'p_convert','repl.py',196),
  ('convert -> 2STR','convert',1,'p_convert','repl.py',197),
  ('convert -> 2FLOAT','convert',1,'p_convert','repl.py',198),
  ('convert -> 2BOOL','convert',1,'p_convert','repl.py',199),
  ('expression -> convert expression','expression',2,'p_expression_convert','repl.py',225),
  ('expression -> NOT expression','expression',2,'p_expression_not','repl.py',243),
  ('expression -> PRINT expression','expression',2,'p_expression_special_fun','repl.py',252),
  ('expression -> SIN expression','expression',2,'p_expression_special_fun','repl.py',253),
  ('expression -> COS expression','expression',2,'p_expression_special_fun','repl.py',254),
  ('expression -> NAME = expression','expression',3,'p_expression_assign','repl.py',273),
  ('type -> STRING_TYPE','type',1,'p_type','repl.py',286),
  ('type -> INT_TYPE','type',1,'p_type','repl.py',287),
  ('type -> FLOAT_TYPE','type',1,'p_type','repl.py',288),
  ('type -> BOOL_TYPE','type',1,'p_type','repl.py',289),
  ('expression -> type NAME = expression','expression',4,'p_expression_declare','repl.py',294),
  ('statement -> DEF NAME args - > type = expression','statement',8,'p_statement_def','repl.py',306),
  ('args -> empty','args',1,'p_args','repl.py',324),
  ('args -> type NAME args','args',3,'p_args','repl.py',325),
  ('expression -> NAME ( call_args )','expression',4,'p_expression_call','repl.py',333),
  ('call_args -> empty','call_args',1,'p_call_args','repl.py',338),
  ('call_args -> expression','call_args',1,'p_call_args','repl.py',339),
  ('call_args -> expression , call_args','call_args',3,'p_call_args','repl.py',340),
  ('expression -> error ; expression','expression',3,'p_error_expression','repl.py',378),
  ('expression -> expression ; expression','expression',3,'p_expression_sequence','repl.py',383),
  ('expression -> { expression }','expression',3,'p_expression_block','repl.py',398),
  ('expression -> IF expression THEN expression else_expression','expression',5,'p_expression_if','repl.py',408),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','repl.py',435),
  ('else_expression -> empty','else_expression',1,'p_else_expression','repl.py',436),
  ('expression -> WHILE expression DO expression END','expression',5,'p_expression_while','repl.py',441),
  ('expression -> expression + expression','expression',3,'p_expression_binop','repl.py',456),
  ('expression -> expression - expression','expression',3,'p_expression_binop','repl.py',457),
  ('expression -> expression * expression','expression',3,'p_expression_binop','repl.py',458),
  ('expression -> expression / expression','expression',3,'p_expression_binop','repl.py',459),
  ('expression -> expression POW expression','expression',3,'p_expression_binop','repl.py',460),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','repl.py',461),
  ('expression -> expression > expression','expression',3,'p_expression_binop','repl.py',462),
  ('expression -> expression < expression','expression',3,'p_expression_binop','repl.py',463),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','repl.py',464),
  ('expression -> - expression','expression',2,'p_expression_uminus','repl.py',543),
  ('expression -> ( expression )','expression',3,'p_expression_group','repl.py',557),
  ('expression -> NUMBER','expression',1,'p_expression_value','repl.py',562),
  ('expression -> FLOAT','expression',1,'p_expression_value','repl.py',563),
  ('expression -> STRING','expression',1,'p_expression_value','repl.py',564),
  ('expression -> TRUE','expression',1,'p_expression_value','repl.py',565),
  ('expression -> FALSE','expression',1,'p_expression_value','repl.py',566),
  ('expression -> NAME','expression',1,'p_expression_name','repl.py',571),
  ('empty -> <empty>','empty',0,'p_empty','repl.py',625),
]
